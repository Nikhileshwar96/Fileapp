// Mocks generated by Mockito 5.1.0 from annotations
// in file_app/test/mocks/mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:typed_data' as _i5;

import 'package:file_app/model/file_entity.dart' as _i4;
import 'package:file_app/providers/platform_service_provider.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [IPlatformServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockIPlatformServices extends _i1.Mock implements _i2.IPlatformServices {
  MockIPlatformServices() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.FileEntity>> getFiles(String? fileType) =>
      (super.noSuchMethod(Invocation.method(#getFiles, [fileType]),
              returnValue:
                  Future<List<_i4.FileEntity>>.value(<_i4.FileEntity>[]))
          as _i3.Future<List<_i4.FileEntity>>);
  @override
  _i3.Future<_i5.Uint8List> getThumbnail(
          String? fileType, String? uri, String? id) =>
      (super.noSuchMethod(Invocation.method(#getThumbnail, [fileType, uri, id]),
              returnValue: Future<_i5.Uint8List>.value(_i5.Uint8List(0)))
          as _i3.Future<_i5.Uint8List>);
  @override
  _i3.Future<bool> deleteFile(String? uri) =>
      (super.noSuchMethod(Invocation.method(#deleteFile, [uri]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<List<_i4.FileEntity>> getFolderFiles(String? folder) =>
      (super.noSuchMethod(Invocation.method(#getFolderFiles, [folder]),
              returnValue:
                  Future<List<_i4.FileEntity>>.value(<_i4.FileEntity>[]))
          as _i3.Future<List<_i4.FileEntity>>);
  @override
  dynamic shareFile(String? path) =>
      super.noSuchMethod(Invocation.method(#shareFile, [path]));
  @override
  _i3.Future<bool> checkStoragePermission() =>
      (super.noSuchMethod(Invocation.method(#checkStoragePermission, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<bool> requestStoragePermission() =>
      (super.noSuchMethod(Invocation.method(#requestStoragePermission, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
}
